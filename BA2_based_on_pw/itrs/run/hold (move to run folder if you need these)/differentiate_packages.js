//differentiate BA2 packages for CC, TN, FL#include '/Volumes/BEC/15 User Files/INDD SCRIPTS/primitive/main.js';var utility_path = '/Users/' + $.getenv('USER') + '/Library/Preferences/Adobe InDesign/Version 11.0/en_US/Scripts/Scripts Panel/team scripts/Jason/Utility';var itrs_root_path = '/Users/' + $.getenv('USER') + '/Library/Preferences/Adobe InDesign/Version 11.0/en_US/Scripts/Scripts Panel/team scripts/Jason/BA2_based_on_pw/itrs';var projects_folder = Folder('/Volumes/BEC/15 User Files/INDD SCRIPTS/primitive/_JY_BU/JasonONE_DRIVE_UNSORTED/OneDrive - Benchmark Education/projects');var differentation_folder = Folder(projects_folder+'/BA2/itrs/differentation_materials'); var floop_folder = Folder(differentation_folder+'/floops');var standards_folder = Folder(differentation_folder+'/standards');var region = '';var myFiles = [];var currentFile;$.evalFile(utility_path+'/console.js');$.evalFile(utility_path+'/exporter.js');$.evalFile(utility_path+'/zone.js');$.evalFile(utility_path+'/library.js');$.evalFile(utility_path+'/json.js');start_log('log_BA2_eng_DIFFERENTIATION_' + app.getWWUser());$.evalFile(itrs_root_path+'/data/products.js');//this is based on the concept that 1) it will be included in /run, and 2) that we are always running SNI first.//make "national" (what I suspect is Florida)var fileSep = "/";if(File.fs=="Windows") fileSep = "\\";var selected_folder = Folder.selectDialog('Select the unit folder of the SNI/Florida or the individual xcode folder.');var package_folder; //will be defined later// var myStuffFolder = Folder.selectDialog('What\'s the folder with the stuff you need?');// var myStuffFolder = Folder('/Volumes/user_files/User Files/0 - SCRIPTS/stuff_folder_batchregexgeneral');// var myFiles = selected_folder.getFiles("*.html");var pleaseWaitWindow = new Window('palette', 'Please wait warmly while files are modified...');pleaseWaitWindow.bounds = [400,500,700,510];//pleaseWaitWindow.bringToFront();pleaseWaitWindow.show();//var pleaseWaitPanel = pleaseWaitWindow.add(pleaseWaitPanel, [0,0,200,30], 'Now modifying: ');var xcodeFolders = [];if(selected_folder.fsName.match(/X\d+/)){  xcodeFolders.push(selected_folder);}else{  GetXcodeFolders(selected_folder);}var product_folder, snixcode, sniProduct, grade, unit, xcode, fileCounter, dayLessonCounter, fixedHTML, bankxcode;var language = prompt('en or sp?'); //if running the original two aUsfor(var xf = 0; xf < xcodeFolders.length; xf++){  product_folder = xcodeFolders[xf];  snixcode = product_folder.fsName.match(/X\d+/)[0];  sniProduct = get_product_by_xcode(snixcode);  grade = sniProduct.grade;  unit = sniProduct.unit;  xcode;  fileCounter = 0;  dayLessonCounter = 1; //only used in TN K-2  // var fixedHTML;  bankxcode; //used for alternateUtilities only  //differentiate  // var region = prompt('TN or CC?');  // var language = 'en';  // differentiate(region);  //alternate utilities  // region = 'FL';  // var region = prompt('SNI or CC?'); //if running formativeFix (actually not even, anymore)  // alternateUtilities();  //reverse differentiate  region = 'SNI';  resnization();}pleaseWaitWindow.close();alert('Done!');//FUNCTIONSfunction alternateUtilities(){  GetSubFolders(product_folder);  xcode = snixcode;  log(xcode);  log('Grade ' + grade + ' Unit ' + unit);  //PDF dropping? if any (might do this manually...)  //figure out which additional materials bank is the right xcode  var banks = theBankArray(language);  for(var b = 0; b < banks.length; b++)  {    var bank = banks[b].split(/,/);    if(bank[1] == grade.toUpperCase() && bank[2] == unit)    {      bankxcode = bank[0];      b = banks.length;    }  }  log('bankxcode' + bankxcode);  if(!bankxcode) alert('bankxcode not found! Aborting.');  else  {    //lesson.css fix    var lessonCSS = File(projects_folder+'/BA2/itrs/assets/itrs/css/main/week/lesson.css');    var targetCSSfolder = Folder(product_folder + '/css/main/week');    log(targetCSSfolder);    lessonCSSworked = lessonCSS.copy(targetCSSfolder);    if(lessonCSSworked) log('lesson.css updated!');    else log('ERROR: lesson.css update failed!');    //ok time for HTML    var d = myFiles.length;    fileCounter = 0;    var lastCounter = 0;    log(d);    while (d--)     {        // grade = myFiles[d].fsName.match(/grade(\d|k)/i)[0].match(/(\d|k)/i)[0];        // if(grade == 'K') grade = 'k';        currentFile = myFiles[d];        // OPEN THE FILE        currentFile.open('r');        // pleaseWaitPanel.add(currentFile.name); //doesn't work        // pleaseWaitPanel.show();        // encoding!        currentFile.encoding = 'utf-8';        log('alternateUtilities attempt: ' + currentFile.fsName);        fixedHTML = currentFile.read();        // set lastCounter for comparison        lastCounter = fileCounter;        //DO STUFF        // addPrintPDF();        addBankLinks();        // formativeFix();        if(fileCounter > lastCounter+1)        fileCounter = lastCounter+1;        if(fileCounter > lastCounter)        {           //WRITE THE FILE           currentFile.open('w');           currentFile.write(fixedHTML);           //fileCounter++;        }        currentFile.close();        // log('...file edited!');        // }    }  }}function addPrintPDF(){  if(fixedHTML.match(/<div class="print_button (top|bottom)">.*?data-code/)) //this means it wasn't switched to internal  {    fixedHTML = fixedHTML.replace(/<div class="print_button (top|bottom)">.*$/gm, '<div class="print_button $1"><p><a href="/pdfs/print.pdf" target="_blank">Printable Version <span class="nav-icon-external-link"></span></a></p></div>');    fileCounter++;    log('print PDF button fixed!');  }}function addBankLinks(){  if(fixedHTML.match(/<h5 class="blue">\s*(Additional\s+)?Materials/))  {    fixedHTML = fixedHTML.replace(/<h5 class="blue">\s*(Additional\s+)?Materials/, '<h5 class="blue"><a data-code="'+bankxcode+'" data-type="html" data-extLink="javascript" href="javascript">$1Materials <span class="nav-icon-external-link"></span></a>');    fixedHTML = fixedHTML.replace(/undefinedMaterials/, 'Materials');    fileCounter++;    log('additional material bank link added! (English)');  }  else if(fixedHTML.match(/<h5 class="blue">\s*Materiales(\s+adicionales)/))  {    fixedHTML = fixedHTML.replace(/<h5 class="blue">\s*Materiales(\s+adicionales)/, '<h5 class="blue"><a data-code="'+bankxcode+'" data-type="html" data-extLink="javascript" href="javascript">Materiales$1 <span class="nav-icon-external-link"></span></a>');    fixedHTML = fixedHTML.replace(/Materialesundefined/, 'Materiales');    fileCounter++;    log('additional material bank link added! (Spanish)');  }}function formativeFix(){  if(fixedHTML.match(/Formative Assessment/))  {    // if(region == 'SNI')    // {    //   fixedHTML = fixedHTML.replace(/X60608/g, 'X60992');    //   fixedHTML = fixedHTML.replace(/X60609/g, 'X60993');    //   fixedHTML = fixedHTML.replace(/X60610/g, 'X60994');    //   fixedHTML = fixedHTML.replace(/X60611/g, 'X60995');    //   fixedHTML = fixedHTML.replace(/X60612/g, 'X60996');    //   fixedHTML = fixedHTML.replace(/X60613/g, 'X60997');    //   fixedHTML = fixedHTML.replace(/X60614/g, 'X60998');    // }    // else if(region == 'CC')    // {    //   fixedHTML = fixedHTML.replace(/X60608/g, 'X70398');    //   fixedHTML = fixedHTML.replace(/X60609/g, 'X70399');    //   fixedHTML = fixedHTML.replace(/X60610/g, 'X70400');    //   fixedHTML = fixedHTML.replace(/X60611/g, 'X70401');    //   fixedHTML = fixedHTML.replace(/X60612/g, 'X70402');    //   fixedHTML = fixedHTML.replace(/X60613/g, 'X70403');    //   fixedHTML = fixedHTML.replace(/X60614/g, 'X70404');    // }    if(region == 'CC' || region == 'SNI')    {      fixedHTML = fixedHTML.replace(/X60608/g, 'X70398');      fixedHTML = fixedHTML.replace(/X60609/g, 'X70399');      fixedHTML = fixedHTML.replace(/X60610/g, 'X70400');      fixedHTML = fixedHTML.replace(/X60611/g, 'X70401');      fixedHTML = fixedHTML.replace(/X60612/g, 'X70402');      fixedHTML = fixedHTML.replace(/X60613/g, 'X70403');      fixedHTML = fixedHTML.replace(/X60614/g, 'X70404');    }    fileCounter++;    log('formative fixed!');  }}// function correctiveFeedbackFix()// {//   if(fixedHTML.match(/Corrective Feedback/))//   {//   }// }//here be differentiationfunction differentiate(region){  var targetProduct = get_product(grade, unit, region.replace(/CC/, 'national').replace(/TN/, 'tennessee').replace(/FL/, 'florida'), language)  xcode = targetProduct.xcode;  package_folder = create_folder(product_folder.fsName.replace(/\/X\d+/, '')+'/'+region+'/'+xcode);  product_folder.copy(package_folder);  GetSubFolders(package_folder);  var mytocjsonfiles = package_folder.getFiles("*.json");  //fix the toc.json while we're here  mytocjsonfiles[0].open('r');  var fixedJSON = mytocjsonfiles[0].read();  var jsonregex = new RegExp(snixcode, 'g');  fixedJSON = fixedJSON.replace(jsonregex, xcode);  mytocjsonfiles[0].open('w');  mytocjsonfiles[0].write(fixedJSON);  mytocjsonfiles[0].close();  log('toc.json fixed');  //pdfs in the case of Tennessee (floops and replacement for planner maybe?)  if(region == 'TN') floopPDFs();  dayLessonCounter = 1; //only used in TN K-2  //ok time for HTML  var d = myFiles.length;  fileCounter = 0;  var lastCounter = 0;  while (d--)   {      // grade = myFiles[d].fsName.match(/grade(\d|k)/i)[0].match(/(\d|k)/i)[0];      // if(grade == 'K') grade = 'k';      currentFile = myFiles[d];      // OPEN THE FILE      currentFile.open('r');      // pleaseWaitPanel.add(currentFile.name); //doesn't work      // pleaseWaitPanel.show();      // encoding!      currentFile.encoding = 'utf-8';      fixedHTML = currentFile.read();      // set lastCounter for comparison      lastCounter = fileCounter;      //DO STUFF      // unitSwitch(region); //fixes nav (except for floops, that's floopLine())      standards(region); //places standards      if(region == 'TN')      {        floopLine(); //adds the nav line for the floop        if(currentFile.name.match(/planner/)) floopPage(); //copies a PDF shell that exists and makes it floopified      }      if(fileCounter > lastCounter+1)      fileCounter = lastCounter+1;      if(fileCounter > lastCounter)      {         //WRITE THE FILE         currentFile.open('w');         currentFile.write(fixedHTML);         //fileCounter++;      }      currentFile.close();      // }  }}function resnization(){  var targetProduct = get_product(grade, unit, region.replace(/CC/, 'national').replace(/TN/, 'tennessee').replace(/FL/, 'florida').replace(/SNI/, 'sni'), language)  xcode = targetProduct.xcode;  package_folder = create_folder(product_folder.fsName.replace(/\/X\d+/, '')+'/'+region+'/'+xcode);  product_folder.copy(package_folder);  GetSubFolders(package_folder);  var mytocjsonfiles = package_folder.getFiles("*.json");  //fix the toc.json while we're here  mytocjsonfiles[0].open('r');  var fixedJSON = mytocjsonfiles[0].read();  var jsonregex = new RegExp(snixcode, 'g');  fixedJSON = fixedJSON.replace(jsonregex, xcode);  mytocjsonfiles[0].open('w');  mytocjsonfiles[0].write(fixedJSON);  mytocjsonfiles[0].close();  log('toc.json fixed');  //pdfs in the case of Tennessee (floops and replacement for planner maybe?)  dayLessonCounter = 1; //only used in TN K-2  //ok time for HTML  var d = myFiles.length;  fileCounter = 0;  var lastCounter = 0;  while (d--)   {      // grade = myFiles[d].fsName.match(/grade(\d|k)/i)[0].match(/(\d|k)/i)[0];      // if(grade == 'K') grade = 'k';      currentFile = myFiles[d];      // OPEN THE FILE      currentFile.open('r');      // pleaseWaitPanel.add(currentFile.name); //doesn't work      // pleaseWaitPanel.show();      // encoding!      currentFile.encoding = 'utf-8';      fixedHTML = currentFile.read();      // set lastCounter for comparison      lastCounter = fileCounter;      //DO STUFF      unitSwitch(region); //fixes nav (except for floops, that's floopLine())      unstandards(); //unplaces standards      if(fileCounter > lastCounter+1)      fileCounter = lastCounter+1;      if(fileCounter > lastCounter)      {         //WRITE THE FILE         currentFile.open('w');         currentFile.write(fixedHTML);         //fileCounter++;      }      currentFile.close();      // }  }}function unitSwitch(region){    var dropdownText = '<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">';    var replaceText = [];    switch(region)    {      case 'SNI':        replaceText.push('$1X70969$2X70970$3X70971$4X70972$5X70973$6X70974$7X70975$8X70976$9X70977$10X70978');        replaceText.push('$1X70979$2X70980$3X70981$4X70982$5X70983$6X70984$7X70985$8X70986$9X70987$10X70988');        replaceText.push('$1X70989$2X70990$3X70991$4X70992$5X70993$6X70994$7X70995$8X70996$9X70997$10X70998');        replaceText.push('$1X70999$2X71000$3X71001$4X71002$5X71003$6X71004$7X71005$8X71006$9X71007$10X71008');        replaceText.push('$1X71009$2X71010$3X71011$4X71012$5X71013$6X71014$7X71015$8X71016$9X71017$10X71018');        replaceText.push('$1X71019$2X71020$3X71021$4X71022$5X71023$6X71024$7X71025$8X71026$9X71027$10X71028');        replaceText.push('$1X71029$2X71030$3X71031$4X71032$5X71033$6X71034$7X71035$8X71036$9X71037$10X71038');      case 'CC':        replaceText.push('$1X70893$2X70894$3X70895$4X70896$5X70897$6X70898$7X70899$8X70900$9X70901$10X70902');        replaceText.push('$1X70903$2X70904$3X70905$4X70906$5X70907$6X70908$7X70909$8X70910$9X70911$10X70962');        replaceText.push('$1X70912$2X70913$3X70914$4X70915$5X70916$6X70917$7X70918$8X70919$9X70920$10X70921');        replaceText.push('$1X70922$2X70923$3X70924$4X70925$5X70926$6X70927$7X70928$8X70929$9X70930$10X70931');        replaceText.push('$1X70932$2X70933$3X70934$4X70935$5X70936$6X70937$7X70938$8X70939$9X70940$10X70941');        replaceText.push('$1X70942$2X70943$3X70944$4X70945$5X70946$6X70947$7X70948$8X70949$9X70950$10X70951');        replaceText.push('$1X70952$2X70953$3X70954$4X70955$5X70956$6X70957$7X70958$8X70959$9X70960$10X70961');        break;      case 'TN':        replaceText.push('$1X71072$2X71073$3X71074$4X71075$5X71076$6X71077$7X71078$8X71079$9X71080$10X71081');        replaceText.push('$1X71082$2X71083$3X71084$4X71085$5X71086$6X71087$7X71088$8X71089$9X71090$10X71091');        replaceText.push('$1X71092$2X71093$3X71094$4X71095$5X71096$6X71097$7X71098$8X71099$9X71100$10X71101');        replaceText.push('$1X71102$2X71103$3X71104$4X71105$5X71106$6X71107$7X71108$8X71109$9X71110$10X71111');        replaceText.push('$1X71112$2X71113$3X71114$4X71115$5X71116$6X71117$7X71118$8X71119$9X71120$10X71121');        replaceText.push('$1X71122$2X71123$3X71124$4X71125$5X71126$6X71127$7X71128$8X71129$9X71130$10X71131');        replaceText.push('$1X71132$2X71133$3X71134$4X71135$5X71136$6X71137$7X71138$8X71139$9X71140$10X71141');        break;      case 'FL':        replaceText.push('$1X72475$2X72476$3X72477$4X72478$5X72479$6X72480$7X72481$8X72482$9X72483$10X72484');        replaceText.push('$1X72485$2X72486$3X72487$4X72488$5X72489$6X72490$7X72491$8X72492$9X72493$10X72494');        replaceText.push('$1X72495$2X72496$3X72497$4X72498$5X72499$6X72500$7X72501$8X72502$9X72503$10X72504');        replaceText.push('$1X72505$2X72506$3X72507$4X72508$5X72509$6X72510$7X72511$8X72512$9X72513$10X72514');        replaceText.push('$1X72515$2X72516$3X72517$4X72518$5X72519$6X72520$7X72521$8X72522$9X72523$10X72524');        replaceText.push('$1X72525$2X72526$3X72527$4X72528$5X72529$6X72530$7X72531$8X72532$9X72533$10X72534');        replaceText.push('$1$2$3$4$5$6$7$8$9$10'); //this will never be used! so whatever        break;    }    log('unitSwitch: ' + currentFile.fsName);    // log(fixedHTML);    // var unitNavStart = fixedHTML.match(/aria-expanded="false">Unit(.*\n?.*)X\d+/m)[0];    if(grade == 'k') // && !(unitNavStart.match(/X709(69|70|71|72|73|74|75|76|77|78)/)))    {      fixedHTML = fixedHTML.replace(/<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">.*?(\n*.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+/m, dropdownText+replaceText[0]);      fileCounter++;    }    else if(grade == 1) // && !(unitNavStart.match(/X709(79|80|81|82|83|84|85|86|87|88)/)))    {      fixedHTML = fixedHTML.replace(/<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">.*?(\n*.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+/m, dropdownText+replaceText[1]);      fileCounter++;    }    else if(grade == 2) // && !(unitNavStart.match(/X709(89|90|91|92|93|94|95|96|97|98)/)))    {      fixedHTML = fixedHTML.replace(/<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">.*?(\n*.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+/m, dropdownText+replaceText[2]);      fileCounter++;    }    else if(grade == 3) // && !(unitNavStart.match(/X70999|X710(00|01|02|03|04|05|06|07|08)/)))    {      fixedHTML = fixedHTML.replace(/<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">.*?(\n*.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+/m, dropdownText+replaceText[3]);      fileCounter++;    }    else if(grade == 4) // && !(unitNavStart.match(/X710(09|10|11|12|13|14|15|16|17|18)/)))    {      fixedHTML = fixedHTML.replace(/<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">.*?(\n*.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+/m, dropdownText+replaceText[4]);      fileCounter++;    }    else if(grade == 5) // && !(unitNavStart.match(/X710(19|20|21|22|23|24|25|26|27|28)/)))    {      fixedHTML = fixedHTML.replace(/<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">.*?(\n*.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+/m, dropdownText+replaceText[5]);      fileCounter++;    }    else if(grade == 6) // && !(unitNavStart.match(/X710(29|30|31|32|33|34|35|36|37|38)/)))    {      fixedHTML = fixedHTML.replace(/<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">.*?(\n*.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+(.+\n.+)X\d+/m, dropdownText+replaceText[6]);      fileCounter++;    }}function standards(region){  if(currentFile.fsName.match(/lesson/))  {    var gradeUpper = grade.toUpperCase();    var week = currentFile.fsName.match(/week\d/)[0].match(/\d/)[0];    var day = false;    try{day = currentFile.fsName.match(/day\d/)[0].match(/\d/)[0];}catch(e){}    var lesson = currentFile.fsName.match(/lesson\d+/)[0].match(/\d+/)[0];    // log('UNIT WEEK DAY LESSON: ' + )        var csv_file = File(standards_folder + '/' + region + '/grade' + gradeUpper + (region=='TN'?'.txt':'.csv'));    var lines = returnSplit(csv_file, '\n');    var yesThisIsIt = false;    for(var l = 0; l < lines.length; l++)    {      var line = lines[l];      if(region == 'CC')      {        if(line.match(/_D\d/)) line = line.replace(/\d+,Y\d+_TRS_V\d_G(\w)_U(\d+)_W(\d)_D(\d)_L(\d+),(.*)/, '$1,$2,$3,$4,$5,$6');        else line = line.replace(/\d+,Y\d+_TRS_V\d_G(\w)_U(\d+)_W(\d)_L(\d+),(.*)/, '$1,$2,$3,,$4,$5');        line = line.split(',');                var lineGrade = line[0];        var lineUnit = line[1];        var lineWeek = line[2];        var lineDay = line[3];        if(lineDay == '') lineDay = false;        var lineLesson = line[4];        var lineStandards = line[5];        lineStandards = lineStandards.replace(/&#44;/g, ',');        lineStandards = lineStandards.replace(/(\w|\))\s+(\w)/g, '$1, $2').replace(/\t/g, '').replace(/\s+/g, ' ').replace(/(\S)\s,/, '$1,').replace(/^\s(\S)/g, '$1').replace(/(\S)\s$/g, '$1').replace(/"/g, '');        if(unit == lineUnit && week == lineWeek && day == lineDay && lesson == lineLesson)        {          yesThisIsIt = true;          // fixedHTML = fixedHTML.replace(/<span class="standards">\s*?<\/span>/, '<span class="standards">' + lineStandards + '<\/span>');          if(fixedHTML.match(/<span class="standards">/)) fixedHTML = fixedHTML.replace(/<span class="standards">\s*?<\/span>/, '<span class="standards">' + lineStandards + '<\/span>');          else fixedHTML = fixedHTML.replace(/(<h2.+?min\.\))/i, '$1 <span class="standards">' + lineStandards + '<\/span>');          if(fixedHTML.match(lineStandards.replace(/\(.*/, ''))) log('CC standards success: ' + lineStandards);          else log('CC standards FAILURE, could not place correct standards: ' + lineStandards);          l = lines.length; //we did it!          dayLessonCounter = 1;          fileCounter++;        }      }      else if(region == 'TN')      {        line = line.replace(/(\d+)\t(\d)\t(\d+)\t(.*)/, '$1|$2|$3|$4');        line = line.split(/\|/);        // log(line);        var lineUnit = line[0];        var lineWeek = line[1];        var lineDayOrLesson = line[2];        var lineStandards = line[3];        // log(lineStandards);        try{lineStandards = lineStandards.replace(/(\w|\))\s+(\w)/g, '$1, $2').replace(/\t/g, '').replace(/\s+/g, ' ').replace(/(\S)\s,/, '$1,').replace(/^\s(\S)/g, '$1').replace(/(\S)\s$/g, '$1').replace(/"/g, '');}        catch(e){log('NO STANDARDS FOUND, PROBABLY')}        // if(l == 0) log('UNIT WEEK : ' + lineUnit + ' | ' + lineWeek + ' | ' + lineDayOrLesson + ' | ' + lineStandards);        yesThisIsIt = false;        // if(unit == lineUnit)        // {        //   if(week == lineWeek)        //   {        //     log(lineDayOrLesson + ' dayLessonCounter ' + dayLessonCounter);        //   }        // }        if(unit == lineUnit && week == lineWeek && (!grade.match(/2/)?((grade.match(/[k1]/)?day:lesson) == lineDayOrLesson):true))        {          // log('gets past first check');          if(grade.match(/[k12]/))          {            //we count the day (or the whole week in the case of grade 2)            if(lesson == dayLessonCounter) yesThisIsIt = true;            else dayLessonCounter++;          }          else //upper grades actually have lesson numbers in this column          {            yesThisIsIt = true;          }          // log('dayLessonCounter: ' + dayLessonCounter);          if(yesThisIsIt)          {            // log('yesthisisit');            if(fixedHTML.match(/<span class="standards">/)) fixedHTML = fixedHTML.replace(/<span class="standards">\s*?<\/span>/, '<span class="standards">' + lineStandards + '<\/span>');            else fixedHTML = fixedHTML.replace(/(<h2.+?min\.?\))/i, '$1 <span class="standards">' + lineStandards + '<\/span>');            if(fixedHTML.match(lineStandards)) log('TN standards success: ' + lineStandards);            else log('TN standards FAILURE, could not place correct standards: ' + lineStandards);            l = lines.length; //we did it!            dayLessonCounter = 1;            fileCounter++;          }        }      }    }    if(!yesThisIsIt) log('STANDARDS FAILURE, could not find standards!!!');    dayLessonCounter = 1;  }}function unstandards(){  if(currentFile.fsName.match(/lesson/))  {    fixedHTML = fixedHTML.replace(/<span class="standards">.*?<\/span>"/, '<span class="standards"></span>');    fileCounter++;  }}//add floop pdf shell (outside of while loop) and, in every file (inside of loop) add the line for the nav entry function floopPDFs(){  //PDF  log('floopPDFs time...');  //example: Y42288_GK_U1_W1.pdf  $.evalFile(itrs_root_path+'/main/pdfs/pdfs.js');  var output_pdfs_folder = create_folder(package_folder+'/pdfs');  var grade_folder = create_folder(output_pdfs_folder+'/grade'+grade.toLowerCase());  var unit_folder = create_folder(grade_folder+'/unit'+unit);  // var overview_folder = create_folder(unit_folder+'/overview');  // var unit_resources_folder = create_folder(unit_folder+'/unit_resources');  var week1_folder = create_folder(unit_folder+'/week1');  var week2_folder = create_folder(unit_folder+'/week2');  var week3_folder = create_folder(unit_folder+'/week3');  // var additional_resources_folder = create_folder(unit_folder+'/additional_resources');  // var id = grade+unit;  //grab the two CV pdfs not in the shell (one is by grade, the other is global)  var pdf_assets_folder;  pdf_assets_folder = Folder(differentation_folder+'/floops/TN');  var pdfFiles = pdf_assets_folder.getFiles();  var floopRegex1 = new RegExp('Y\\d+_G'+grade.toUpperCase()+'_U'+unit+'_W1', 'i');  var floopRegex2 = new RegExp('Y\\d+_G'+grade.toUpperCase()+'_U'+unit+'_W2', 'i');  var floopRegex3 = new RegExp('Y\\d+_G'+grade.toUpperCase()+'_U'+unit+'_W3', 'i');  // log(floopRegex1 + '\n' + floopRegex2 + '\n' + floopRegex3);  var l = pdfFiles.length;  for(var x = 0; x < l; x++)  {    // log(pdfFiles[x].name);    var pdfFile = pdfFiles[x];    if(!!pdfFile.name.match(/\.ds_store/i)){continue;}    if(!!pdfFile.name.match(floopRegex1))      pdfFile.copy(Folder(week1_folder+'/floop.pdf'));    else if(!!pdfFile.name.match(floopRegex2))      pdfFile.copy(Folder(week2_folder+'/floop.pdf'));    else if(!!pdfFile.name.match(floopRegex3))      pdfFile.copy(Folder(week3_folder+'/floop.pdf'));    // else if(!!pdfFile.name.match(/planner1/))      // pdfFile.copy(Folder(week1_folder+'/planner.pdf'));     // else if(!!pdfFile.name.match(/planner2/))      // pdfFile.copy(Folder(week2_folder+'/planner.pdf'));     // else if(!!pdfFile.name.match(/planner3/))      // pdfFile.copy(Folder(week3_folder+'/planner.pdf'));   }  log('floopPDFs done!');}function floopPage(){  log('floopPage: ' + currentFile.fsName);  currentFile.copy(currentFile.fsName.replace(/planner/, 'floop'));  var floopFile = File(currentFile.fsName.replace(/planner/, 'floop'));  floopFile.open('w');  floopFile.write(fixedHTML);  floopFile.close();  var week = floopFile.fsName.match(/week\d/)[0].match(/\d/)[0];  floopFile.open('r');  var floopHTML = floopFile.read();  floopHTML = floopHTML.replace(/class="active"/, ''); //nav delete current active (planner)  var flooplinkregex = new RegExp('(<a )(href="\\/html\\/grade'+grade+'\\/unit'+unit+'\\/week'+week+'\\/floop.html")');  floopHTML = floopHTML.replace(flooplinkregex, '$1class="active" $2'); //nav put the new class="active" in  floopHTML = floopHTML.replace(/planner.pdf/, 'floop.pdf'); //pdf link  // floopHTML = floopHTML.replace(/planner.css/, 'floop.css'); //css link, but let's see if it just works without this  floopFile.open('w');  floopFile.write(floopHTML);  floopFile.close();}function floopLine(){  //<a href="/html/grade1/unit1/week2/planner.html" data-type="internal" data-extLink="/html/grade1/unit1/week2/planner.html">  //<p>Comprehensive Literacy Planner</p>  //</a>  if(!!fixedHTML.match(/(<p>Comprehensive Literacy Planner<\/p>(\n|\r)<\/a>)/m))  {    log('floopLine success');    fixedHTML = fixedHTML.replace(/(week1\/planner.html">(\n|\r)<p>Comprehensive Literacy Planner<\/p>(\n|\r)<\/a>)/m, '$1<a href="/html/grade'+grade+'/unit'+unit+'/week1/floop.html" data-type="internal" data-extLink="/html/grade'+grade+'/unit'+unit+'/week1/floop.html">\r<p>Tennessee ELA Standards</p>\r</a>');    fixedHTML = fixedHTML.replace(/(week2\/planner.html">(\n|\r)<p>Comprehensive Literacy Planner<\/p>(\n|\r)<\/a>)/m, '$1<a href="/html/grade'+grade+'/unit'+unit+'/week2/floop.html" data-type="internal" data-extLink="/html/grade'+grade+'/unit'+unit+'/week2/floop.html">\r<p>Tennessee ELA Standards</p>\r</a>');    fixedHTML = fixedHTML.replace(/(week3\/planner.html">(\n|\r)<p>Comprehensive Literacy Planner<\/p>(\n|\r)<\/a>)/m, '$1<a href="/html/grade'+grade+'/unit'+unit+'/week3/floop.html" data-type="internal" data-extLink="/html/grade'+grade+'/unit'+unit+'/week3/floop.html">\r<p>Tennessee ELA Standards</p>\r</a>');    fileCounter++;  }}// function copyNewPDFs()// {//   $.evalFile(itrs_root_path+'/main/pdfs/pdfs.js');//   var output_pdfs_folder = create_folder(package_folder+'/pdfs');//   // output_pdfs_folder.burn();//   output_pdfs_folder = create_folder(package_folder+'/pdfs');//   var grade_folder = create_folder(output_pdfs_folder+'/grade'+grade.toLowerCase());//   var unit_folder = create_folder(grade_folder+'/unit'+unit);//   var overview_folder = create_folder(unit_folder+'/overview');//   var unit_resources_folder = create_folder(unit_folder+'/unit_resources');//   var week1_folder = create_folder(unit_folder+'/week1');//   var week2_folder = create_folder(unit_folder+'/week2');//   var week3_folder = create_folder(unit_folder+'/week3');//   var additional_resources_folder = create_folder(unit_folder+'/additional_resources');//   var grade = this.grade;//   var lower = true;//   if(grade.match(/[3456]/)) lower = false;//   var unit = this.unit;//   var volume = this.volume;//   var id = grade+unit;//   //overview and unit resources PDFs//   //grab the two CV pdfs not in the shell (one is by grade, the other is global)//   var pdf_assets_folder;//   pdf_assets_folder = Folder(projects_folder+'/BA2/itrs/assets/pdfs/floops'); //make this folder//   var pdfFiles = pdf_assets_folder.getFiles();//   var floopRegex = new RegExp('content_knowledge_alignment_g'+this.grade, 'i');//   var l = pdfFiles.length;//   for(var x = 0; x < l; x++)//   {//     var pdfFile = pdfFiles[x];//     if(!!pdfFile.name.match(/\.ds_store/i)){continue;}//     if(!!pdfFile.name.match(floopRegex))//       pdfFile.copy(Folder(overview_folder+'/floop.pdf'));//     // else if(!!pdfFile.name.match(/planner1/))//     //   pdfFile.copy(Folder(week1_folder+'/planner.pdf')); //     // else if(!!pdfFile.name.match(/planner2/))//     //   pdfFile.copy(Folder(week2_folder+'/planner.pdf')); //     // else if(!!pdfFile.name.match(/planner3/))//     //   pdfFile.copy(Folder(week3_folder+'/planner.pdf')); //   }// }// function englishFixes()// {//   //STATIC GRADE DROPDOWN FIX//   fixedHTML = fixedHTML.replace(/<ul id="drop2"(.*\n.*)X13420(.*\n.*)X13461(.*\n.*)X13502(.*\n.*)X13513(.*\n.*)X13554(.*\n.*)X13595(.*\n.*)X13636/g, '<ul id="drop2"$1X37503$2X37544$3X37585$4X37626$5X37667$6X37708$7X37749');//   //GET RID OF DATA CODE THING FIX//   fixedHTML = fixedHTML.replace(/<div class="wow fadeInDown">(.*\n.*)data-type="internal" data-code="X\d+" data-extLink/, '<div class="wow fadeInDown">$1data-type="internal" data-extLink');//   //UNIT NAVIGATION FIX//   if(xcode.match(/X3750/) || xcode.match(/X3751/))//   {//     fixedHTML = fixedHTML.replace(/<b>Unit:(.*\n?.*)X13420(.*\n.*)X13421(.*\n.*)X13422(.*\n.*)X13423(.*\n.*)X13424(.*\n.*)X13425(.*\n.*)X13426(.*\n.*)X13427(.*\n.*)X13428(.*\n.*)X13429/, '<b>Unit:$1X37503$2X37504$3X37505$4X37506$5X37507$6X37508$7X37509$8X37510$9X37511$10X37512');//   }//   else if(xcode.match(/X3754/) || xcode.match(/X3755/))//   {//     fixedHTML = fixedHTML.replace(/<b>Unit:(.*\n?.*)X13420(.*\n.*)X13421(.*\n.*)X13422(.*\n.*)X13423(.*\n.*)X13424(.*\n.*)X13425(.*\n.*)X13426(.*\n.*)X13427(.*\n.*)X13428(.*\n.*)X13429/, '<b>Unit:$1X37544$2X37545$3X37546$4X37547$5X37548$6X37549$7X37550$8X37551$9X37552$10X37553');//   }//   else if(xcode.match(/X3758/) || xcode.match(/X3759/))//   {//     fixedHTML = fixedHTML.replace(/<b>Unit:(.*\n?.*)X13420(.*\n.*)X13421(.*\n.*)X13422(.*\n.*)X13423(.*\n.*)X13424(.*\n.*)X13425(.*\n.*)X13426(.*\n.*)X13427(.*\n.*)X13428(.*\n.*)X13429/, '<b>Unit:$1X37585$2X37586$3X37587$4X37588$5X37589$6X37590$7X37591$8X37592$9X37593$10X37594');//   }//   else if(xcode.match(/X3762/) || xcode.match(/X3763/))//   {//     fixedHTML = fixedHTML.replace(/<b>Unit:(.*\n?.*)X13420(.*\n.*)X13421(.*\n.*)X13422(.*\n.*)X13423(.*\n.*)X13424(.*\n.*)X13425(.*\n.*)X13426(.*\n.*)X13427(.*\n.*)X13428(.*\n.*)X13429/, '<b>Unit:$1X37626$2X37627$3X37628$4X37629$5X37630$6X37631$7X37632$8X37633$9X37634$10X37635');//     fixedHTML = fixedHTML.replace(/.*Unit Writing and Vocabulary.*/, '');//   }//   else if(xcode.match(/X3766/) || xcode.match(/X3767/))//   {//     fixedHTML = fixedHTML.replace(/<b>Unit:(.*\n?.*)X13420(.*\n.*)X13421(.*\n.*)X13422(.*\n.*)X13423(.*\n.*)X13424(.*\n.*)X13425(.*\n.*)X13426(.*\n.*)X13427(.*\n.*)X13428(.*\n.*)X13429/, '<b>Unit:$1X37667$2X37668$3X37669$4X37670$5X37671$6X37672$7X37673$8X37674$9X37675$10X37676');//     fixedHTML = fixedHTML.replace(/.*Unit Writing and Vocabulary.*/, '');//   }//   else if(xcode.match(/X3770/) || xcode.match(/X3771/))//   {//     fixedHTML = fixedHTML.replace(/<b>Unit:(.*\n?.*)X13420(.*\n.*)X13421(.*\n.*)X13422(.*\n.*)X13423(.*\n.*)X13424(.*\n.*)X13425(.*\n.*)X13426(.*\n.*)X13427(.*\n.*)X13428(.*\n.*)X13429/, '<b>Unit:$1X37708$2X37709$3X37710$4X37711$5X37712$6X37713$7X37714$8X37715$9X37716$10X37717');//     fixedHTML = fixedHTML.replace(/.*Unit Writing and Vocabulary.*/, '');//   }//   else if(xcode.match(/X3774/) || xcode.match(/X3775/))//   {//     fixedHTML = fixedHTML.replace(/<b>Unit:(.*\n?.*)X13420(.*\n.*)X13421(.*\n.*)X13422(.*\n.*)X13423(.*\n.*)X13424(.*\n.*)X13425(.*\n.*)X13426(.*\n.*)X13427(.*\n.*)X13428(.*\n.*)X13429/, '<b>Unit:$1X37749$2X37750$3X37751$4X37752$5X37753$6X37754$7X37755$8X37756$9X37757$10X37758');//     fixedHTML = fixedHTML.replace(/.*Unit Writing and Vocabulary.*/, '');//   }//   //UNIT LEVEL ADDITIONAL MATERIALS NAVIGATION FIX//   fixedHTML = fixedHTML.replace(/<a href=(.*)class="((activebutton )?)(.*)Managing an Independent Reading Program(.*\n.*)class="((activebutton )?)(.*)Recommended Trade Books/, '<a href=$1class="$6$4Recommended Trade Books');//   //LESSON LEVEL QUOTATION FUCKUP FIX//   fixedHTML = fixedHTML.replace(/\n"/, '');// }function GetXcodeFolders(theFolder){   var myFileList = theFolder.getFiles();     for (var i = 0; i < myFileList.length; i++)    {          var myFile = myFileList[i];          if (myFile instanceof Folder && myFile.fsName.match(/X\d+/))        {               xcodeFolders.push(myFile);          }   }}function GetSubFolders(theFolder) {  if (!(theFolder.name.match(/old$/i)) && !(theFolder.name.match(/rrhtml$/i)))  {       var myFileList = theFolder.getFiles();         for (var i = 0; i < myFileList.length; i++)        {              var myFile = myFileList[i];              if (myFile instanceof Folder)            {                   GetSubFolders(myFile);              }              else if (myFile instanceof File && myFile.name.match(/\.html$/i))             {                   myFiles.push(myFile);              }         }     }}function cssGetSubFolders(theFolder) {	if (!(theFolder.name.match(/old$/i)) && !(theFolder.name.match(/rrhtml$/i)))	{	     var myFileList = theFolder.getFiles();  	     for (var i = 0; i < myFileList.length; i++) 	     {  	          var myFile = myFileList[i];  	          if (myFile instanceof Folder)	          {  	               cssGetSubFolders(myFile);  	          }  	          else if (myFile instanceof File && myFile.name.match(/\.css$/i)) 	          {              	   mycssFiles.push(myFile);          	  }      	 }  	 }}//by Mikefunction returnSplit(file, mode) {    if (mode.match(/\n/)) {        file.open('r');        str = file.read();    } else {        str = file;    }    str = str.split(mode);    return str;}function theBankArray(lang){  var banky = [];  switch(lang)  {    case 'en':      banky.push('X68318,K,1');      banky.push('X68319,K,2');      banky.push('X68320,K,3');      banky.push('X68321,K,4');      banky.push('X68322,K,5');      banky.push('X68323,K,6');      banky.push('X68324,K,7');      banky.push('X68325,K,8');      banky.push('X68326,K,9');      banky.push('X68327,K,10');      banky.push('X68328,1,1');      banky.push('X68329,1,2');      banky.push('X68330,1,3');      banky.push('X68331,1,4');      banky.push('X68332,1,5');      banky.push('X68333,1,6');      banky.push('X68334,1,7');      banky.push('X68335,1,8');      banky.push('X68336,1,9');      banky.push('X68337,1,10');      banky.push('X68338,2,1');      banky.push('X68339,2,2');      banky.push('X68340,2,3');      banky.push('X68341,2,4');      banky.push('X68342,2,5');      banky.push('X68343,2,6');      banky.push('X68344,2,7');      banky.push('X68345,2,8');      banky.push('X68346,2,9');      banky.push('X68347,2,10');      banky.push('X68348,3,1');      banky.push('X68349,3,2');      banky.push('X68350,3,3');      banky.push('X68351,3,4');      banky.push('X68352,3,5');      banky.push('X68353,3,6');      banky.push('X68354,3,7');      banky.push('X68355,3,8');      banky.push('X68356,3,9');      banky.push('X68357,3,10');      banky.push('X68358,4,1');      banky.push('X68359,4,2');      banky.push('X68360,4,3');      banky.push('X68361,4,4');      banky.push('X68362,4,5');      banky.push('X68363,4,6');      banky.push('X68364,4,7');      banky.push('X68365,4,8');      banky.push('X68366,4,9');      banky.push('X68367,4,10');      banky.push('X68368,5,1');      banky.push('X68369,5,2');      banky.push('X68370,5,3');      banky.push('X68371,5,4');      banky.push('X68372,5,5');      banky.push('X68373,5,6');      banky.push('X68374,5,7');      banky.push('X68375,5,8');      banky.push('X68376,5,9');      banky.push('X68377,5,10');      banky.push('X68378,6,1');      banky.push('X68379,6,2');      banky.push('X68380,6,3');      banky.push('X68381,6,4');      banky.push('X68382,6,5');      banky.push('X68383,6,6');      banky.push('X68384,6,7');      banky.push('X68385,6,8');      banky.push('X68386,6,9');      banky.push('X68387,6,10');      return banky; //thanky mr banky      break;    case 'sp':      banky.push('X73251,K,1');      banky.push('X73252,1,1');      banky.push('X73253,2,1');      banky.push('X73254,3,1');      banky.push('X73255,4,1');      banky.push('X73256,5,1');      banky.push('X73257,6,1');      banky.push('X73258,K,2');      banky.push('X73259,1,2');      banky.push('X73260,2,2');      banky.push('X73261,3,2');      banky.push('X73262,4,2');      banky.push('X73263,5,2');      banky.push('X73264,6,2');      banky.push('X73321,K,3');      banky.push('X73322,1,3');      banky.push('X73323,2,3');      banky.push('X73324,3,3');      banky.push('X73325,4,3');      banky.push('X73326,5,3');      banky.push('X73327,6,3');      banky.push('X73330,K,4');      banky.push('X73331,1,4');      banky.push('X73332,2,4');      banky.push('X73333,3,4');      banky.push('X73334,4,4');      banky.push('X73335,5,4');      banky.push('X73336,6,4');      banky.push('X73337,k,5');      banky.push('X73338,1,5');      banky.push('X73339,2,5');      banky.push('X73340,3,5');      banky.push('X73341,4,5');      banky.push('X73342,5,5');      banky.push('X73343,6,5');      banky.push('X73344,K,6');      banky.push('X73345,1,6');      banky.push('X73346,2,6');      banky.push('X73347,3,6');      banky.push('X73348,4,6');      banky.push('X73349,5,6');      banky.push('X73350,K,7');      banky.push('X73351,1,7');      banky.push('X73352,2,7');      banky.push('X73353,3,7');      banky.push('X73354,4,7');      banky.push('X73355,5,7');      banky.push('X73356,6,7');      banky.push('X73357,K,8');      banky.push('X73358,1,8');      banky.push('X73359,2,8');      banky.push('X73360,3,8');      banky.push('X73361,4,8');      banky.push('X73362,5,8');      banky.push('X73363,6,8');      banky.push('X73364,K,9');      banky.push('X73365,1,9');      banky.push('X73366,2,9');      banky.push('X73367,3,9');      banky.push('X73368,4,9');      banky.push('X73369,5,9');      banky.push('X73370,6,9');      banky.push('X73371,K,10');      banky.push('X73372,1,10');      banky.push('X73373,2,10');      banky.push('X73374,3,10');      banky.push('X73375,4,10');      banky.push('X73376,5,10');      banky.push('X73377,6,10');      banky.push('X73378,6,6');      return banky; //thanky mr banky      break;    default:      alert('invalid language on theBankArray');  }}//stuff from the loop not used       // //GET THE X CODE      // var xcode = myFiles[d].path.match(/X\d+/);      // xcode = xcode[0];      // //GET THE GRADE      // var grade;      // if(xcode.match(/X3750/) || xcode.match(/X3751/) || xcode.match(/X3589/) || xcode.match(/X3590/))      // {      //   grade = 'k';      // }      // else if(xcode.match(/X3754/) || xcode.match(/X3755/) || xcode.match(/X3593/) || xcode.match(/X3594/))      // {      //   grade = 1;      // }      // else if(xcode.match(/X3758/) || xcode.match(/X3759/) || xcode.match(/X3597/) || xcode.match(/X3598/))      // {      //   grade = 2;      // }      // else if(xcode.match(/X3762/) || xcode.match(/X3763/) || xcode.match(/X3601/) || xcode.match(/X3602/))      // {      //   grade = 3;      // }      // else if(xcode.match(/X3766/) || xcode.match(/X3767/) || xcode.match(/X3606/))      // {      //   grade = 4;      // }      // else if(xcode.match(/X3770/) || xcode.match(/X3771/) || xcode.match(/X3610/) || xcode.match(/X3611/))      // {      //   grade = 5;      // }      // else if(xcode.match(/X3774/) || xcode.match(/X3775/) || xcode.match(/X3614/) || xcode.match(/X3615/))      // {      //   grade = 6;      // }      // //LOWER GRADE?      // var lower = false;      // if(grade == 'k' || grade == '1' || grade == '2')      //   lower = true;      // //GET THE UNIT NUMBER      // var unitNumber = myFiles[d].path.match(/unit\d+/);      // //GET THE DAY      // var day;