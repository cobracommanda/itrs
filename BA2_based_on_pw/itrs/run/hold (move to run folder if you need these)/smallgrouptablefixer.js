//for BA2.5//need this stuff for xcodevar itrs_root_path = '/Users/' + $.getenv('USER') + '/Library/Preferences/Adobe InDesign/Version 11.0/en_US/Scripts/Scripts Panel/team scripts/Jason/BA2_based_on_pw/itrs';$.evalFile(itrs_root_path+'/data/products_NAT_2p5.js');var outputfile = File(app.activeScript.parent.fsName + '/smallgrouptablefinder_output.tsv');var myWorkFolder = Folder.selectDialog('Point me to a folder of BA2(.5) INDDS!');var myFiles = myWorkFolder.getFiles("*.indd");// var myFiles = [];// GetSubFolders(myWorkFolder);for(var f = 0; f < myFiles.length; f++){  var file = myFiles[f];  outputfile.open('r');  var output = outputfile.read();  if(!output.match(file.displayName))  {    app.open(file);    var doc = app.activeDocument;    var found = false;    for(var pg = 0; pg < doc.pages.length; pg++)    {      var tfs = getTextFrames(doc.pages[pg]);      for(var t = 0; t < tfs.length; t++)      {        if(tfs[t].label.match(/lesson/i))        {          for(var p = 0; p < tfs[t].paragraphs.length; p++)          {            var para = tfs[t].paragraphs[p];            if(para.tables.length > 0)            {              try              {                if(para.tables[0].cells[0].paragraphs[0].appliedParagraphStyle.name.match(/Small_group_A-hd/i))                {                  var grade = file.name.match(/G\w/)[0].replace(/G/, '');                  var unit = file.name.match(/U\w/)[0].replace(/U/, '');                  var week = file.name.match(/W\w/)[0].replace(/W/, '');                  var lowerGrade = grade.match(/[K12]/) ? true : false;                  var day = lowerGrade ? file.name.match(/D\w/)[0].replace(/D/, '') : 'X';                  var lesson = file.name.match(/L\d+\D/)[0].replace(/\D/g, '');                  // outputfile.writeln(grade+'\t'+unit+'\t'+week+'\t'+day+'\t'+lesson);                  var xcode = get_product(grade, unit, 'national', 'en').xcode;                  //OK BUT NOW WE GET INTO IT                  var htmlFile;                  if(!lowerGrade) htmlFile = File('/Volumes/BEC/23 HTML eBooks/Benchmark Advance 2/National_2_5/iTRS/u'+unit+'/'+xcode+'/html/grade'+grade.toLowerCase()+'/unit'+unit+'/week'+week+'/lesson'+lesson+'.html');                  else htmlFile = File('/Volumes/BEC/23 HTML eBooks/Benchmark Advance 2/National_2_5/iTRS/u'+unit+'/'+xcode+'/html/grade'+grade.toLowerCase()+'/unit'+unit+'/week'+week+'/day'+day+'/lesson'+lesson+'.html');                  // else htmlFile = File(itrs_root_path+'/backup/nat2p5/u'+unit+'/'+xcode+'/html/grade'+grade.toLowerCase()+'/unit'+unit+'/week'+week+'/day'+day+'/lesson'+lesson+'.html');                  htmlFile.open('r');                  htmlFile.encoding = 'utf-8';                  var html = htmlFile.read();                  // htmlFile.close();                  // htmlFile.open('w');                  // alert(html);                                    var isChanged = false;                  // if(!html.match(/(Independent and Small.+?Group Writing and Conferring|Small.+?Group Reading Instruction and Independent Reading and Conferring)/im) && !html.match(/INDEPENDENT WRITING AND CONFERRING/))                  if(!html.match(/icon-smallgroup/))                  {                    var text = '';                    text += '<div class="small-group mt-4 mb-4">\r';                    text += '<div class="row">\r';                    text += '<div><span class="icon-smallgroup"></span></div>\r';                    text += '<div class="col">\r';                     text += '<h5 class="blue">'+para.tables[0].cells[0].paragraphs[0].contents.toUpperCase().replace(/^\W+(\w)/, '$1').replace(/-/, '&ndash;').replace(/\(TIMES WILL VARY\)/i, '<small><strong>(TIMES WILL VARY)</strong></small>')+'</h5>\r';                    text += '</div>\r';                    text += '</div>\r';                    //ok now we have to do actual stuff                    // text += '<p>' + para.tables[0].cells[0].paragraphs[1].contents + '</p>\r';                    // if(para.tables[0].cells[0].paragraphs.length > 2)                    // {                      for(var tp = 1; tp < para.tables[0].cells[0].paragraphs.length; tp++)                      {                        if(para.tables[0].cells[0].paragraphs[tp].contents.match(/:/))                          text += '<p>' + para.tables[0].cells[0].paragraphs[tp].contents.replace(/^(.+?:)/, '<strong>$1</strong>').replace(/(:<\/strong>)(.+)$/, '$1<em>$2</em>') + '</p>\r';                        else                          text += '<p>' + para.tables[0].cells[0].paragraphs[tp].contents + '</p>\r';                      }                    // }                    text += '</div>\r';                    // alert(text);                    html = html.replace(/\n/g, 'SLASHNEWLINE').replace(/\r/g, 'SLASHRETURN');                    // alert(html);                    // alert(html.match(/(<\/section>SLASH(RETURN|NEWLINE)<\/section>SLASH(RETURN|NEWLINE)<\/div>SLASH(RETURN|NEWLINE)<\/div>SLASH(RETURN|NEWLINE)<\/main>)/m));                    html = html.replace(/(<\/section>SLASH(RETURN|NEWLINE)<\/section>SLASH(RETURN|NEWLINE)<\/div>SLASH(RETURN|NEWLINE)<\/div>SLASH(RETURN|NEWLINE)<\/main>)/m, text + '$1');                    html = html.replace(/SLASHNEWLINE/g, '\n').replace(/SLASHRETURN/g, '\r');                    htmlFile.open('w');                    // alert(html);                    htmlFile.write(html);                    isChanged = true;                  }                  outputfile.open('a');                  outputfile.writeln(grade+'\t'+unit+'\t'+week+'\t'+day+'\t'+lesson+'\t'+(isChanged?'UPDATED':'')+'\t'+doc.name+'\t'+htmlFile.fsName);                  htmlFile.close();                                    found = true;                }              }              catch(e)              {                outputfile.open('a');                outputfile.writeln('!!! SMALL GROUP DETECTION EXPLODED IN: '+doc.name);              }            }            if(found) p = tfs[t].paragraphs.length;          }        }        if(found) t = tfs.length;      }      if(found) pg = doc.pages.length;    }    doc.close(SaveOptions.NO);  }}outputfile.close();alert('Done!');//FUNCTIONSfunction getTextFrames(pageToUse) {    var allframes = pageToUse.allPageItems;    var tfs = [];    for (var af = 0; af < allframes.length; af++)     {        if (allframes[af] instanceof TextFrame)         {          allframes[af].name = allframes[af].label;            tfs.push(allframes[af]);        }    }    return tfs;}function GetSubFolders(theFolder) {  if (!(theFolder.name.match(/old$/i)) && !(theFolder.name.match(/rrhtml$/i)))  {       var myFileList = theFolder.getFiles();         for (var i = 0; i < myFileList.length; i++)        {              var myFile = myFileList[i];              if (myFile instanceof Folder)            {                   GetSubFolders(myFile);              }              else if (myFile instanceof File && myFile.name.match(/\.indd$/i) /*&& myFile.path.match(/grade[345]/)*/)             {                   myFiles.push(myFile);              }         }     }}