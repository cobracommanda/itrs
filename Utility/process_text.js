//CREATOR JY//CREATED 2017-11-30//UPDATED 2017-11-30//VERSION 1.0$.evalFile('/Users/' + $.getenv('USER') + '/Library/Preferences/Adobe InDesign/Version 11.0/en_US/Scripts/Scripts Panel/team scripts/Jason/Utility/console.js');$.evalFile('/Users/' + $.getenv('USER') + '/Library/Preferences/Adobe InDesign/Version 11.0/en_US/Scripts/Scripts Panel/team scripts/Jason/Utility/library.js');start_log();function find_and_replace(object, find, change){    app.findGrepPreferences.findWhat = find;  app.changeGrepPreferences.changeTo = change;  object.changeGrep();  app.findGrepPreferences = NothingEnum.nothing;  app.changeGrepPreferences = NothingEnum.nothing;}function process_textFrame(textFrame){     var text = '';    find_and_replace(textFrame, '~=', '&nd;');  find_and_replace(textFrame, '~_', '&md;');  textFrame.fit(FitOptions.FRAME_TO_CONTENT);  var contents = textFrame.contents;    var strokeColor = textFrame.strokeColor.name;  var strokeType = textFrame.strokeType.name;  var fillColor = textFrame.fillColor.name;  var firstParagraph = textFrame.paragraphs[0];  var firstParagraphContents = firstParagraph.contents;  var firstParagraphStyle = firstParagraph.appliedParagraphStyle.name;  var tint = textFrame.fillTint;  var rounded_corner = textFrame.topLeftCornerOption == CornerOptions.ROUNDED_CORNER ? true : false;  var strokeWeight = textFrame.strokeWeight;  var strokeTint = textFrame.strokeTint;  var scriptLabel = textFrame.label;  switch(true){        default:      text += '<section>\r'+process_paragraphs(textFrame)+'</section>\r';  }      return text;};function process_textFrames(textFrames){  var text = '';  var l = textFrames.length;  for(var x = 0; x < l; x++){    var textFrame = textFrames[x];    text += process_textFrame(textFrame);        }    text = text.replace(/&(m|n)d;/ig, '&$1dash;');  text = text.replace(//g, '');  text = text.applyHTMLCode();  return text;};function process_paragraphs(object){    var text = '';  var paragraphs = object.paragraphs;  var l = paragraphs.length;  var div_opened, ol_opened, ul_opened = false;    for(var x = 0; x < l; x++){    var paragraph = paragraphs[x];    var contents = paragraph.contents.replace(/\uFEFF/g, '');    contents = contents.replace(/\u2013/g, '&ndash;');        var header_contents = contents.replace(/(\(.*\d+\s*min.*\))/ig, '<span class="minutes">$1');    header_contents = header_contents.replace(/(<span class="minutes">(.|\n|\r)*)</ig, '$1</span><');    header_contents = header_contents.replace(/\)\W*/ig, ')<br>');    find_and_replace(paragraph, '~_', '&md;');    var listType = paragraph.bulletsAndNumberingListType;    var appliedFont = paragraph.appliedFont.name;    var fontStyle = paragraph.fontStyle;    var paragraphStyle = paragraph.appliedParagraphStyle.name;    var pointSize = paragraph.words.length > 0 ? ( paragraph.words[0].characters.length > 1 ? paragraph.words[0].characters[1].pointSize : paragraph.words[0].pointSize) : paragraph.pointSize;    var color = paragraph.words.length > 0 ? ( paragraph.words[0].characters.length > 1 ? paragraph.words[0].characters[1].fillColor.name : paragraph.words[0].fillColor.name) : paragraph.fillColor.name;    var bullet = listType == ListType.NO_LIST ? ( !!contents.match(/^\W*\u2022/) ? true : false ) : true;             var skyblue = !!color.match(/new_bhd|C=62 M=0 Y=1 K=0|small group|C=94 M=0 Y=2 K=0|C=70 M=15 Y=0 K=0|C=100 M=0 Y=0 K=0/ig) ? true : false;    var black = !!color.match(/black/i) ? true : false;        var tables = paragraph.tables;    var has_table = tables.length > 0 ? true : false;    var has_textFrame = paragraph.textFrames.length > 0 ? true : false;    var groups = paragraph.groups;    var has_group = groups.length > 0 ? true : false;    var has_rectangle = paragraph.rectangles.length > 0 ? true : false;    var has_oval = paragraph.ovals.length > 0 ? true : false;    var red = !!color.match(/small hds|day_red|language|Day 1=m100, y70|Day 1/ig) ? true : false;        var empty = !!paragraph.contents.match(/\w/) ? false : true;        var h2 = !!paragraphStyle.match(/a-hd|a-head/i) ? true : false;    var h3 = pointSize == 14 ? true : false;    var h4 = !!paragraphStyle.match(/ccss-sidebar-hd/i) ? true : false;        var objectives_hd = !!paragraphStyle.match(/objectives-hd/i) ? true : false;    switch(true){      case (bullet && !ol_opened && listType == ListType.NUMBERED_LIST): ol_opened = true; text += '<ol>\r'; break;      case (bullet && !ul_opened): ul_opened = true; text += '<ul>\r'; break;            case (ul_opened && !bullet): ul_opened = false; text += '</ul>\r'; break;      case (ol_opened && !bullet): ol_opened = false; text += '</ol>\r'; break;    }        switch(true){       case has_table: text += build_tables(tables); break;                  case empty: break;      case h2: text += '<h2>'+contents.replace(/(\n|\r)*/g, '').replace(/-/g, '&#8209;')+'</h2>\r'; break;      case h3: text += '<h3>'+contents.replace(/(\n|\r)*/g, '').replace(/-/g, '&#8209;')+'</h3>\r'; break;      case h3: text += '<h3>'+contents.replace(/(\n|\r)*/g, '').replace(/-/g, '&#8209;')+'</h3>\r'; break;      case objectives_hd: text += '<h3 class="prek-clr">'+contents.replace(/(\n|\r)*/g, '').replace(/-/g, '&#8209;')+'</h3>\r'; break;            case h4: text += '<h4>'+contents.replace(/(\n|\r)*/g, '').replace(/-/g, '&#8209;')+'</h4>\r'; break;      case bullet: text += '<li>'+process_words(paragraph).replace(/\u2022/, '')+'</li>\r'; break;            default: text += '<p>'+process_words(paragraph)+'</p>\r';    }  }    if(div_opened){ div_opened = false; text += '</div>\r'; }  if(ul_opened){ ul_opened = false; text += '</ul>\r'; }  if(ol_opened){ ol_opened = false; text += '</ol>\r'; }  text = text.replace(/\uFEFF/g, '');    text = text.replace(/<\/strong>\s*<strong>/g, '');  text = text.replace(/(<\/strong>\/\s*)<\/strong>/g, '$1');  text = text.replace(/<strong>\s*(\/<strong>)/g, '$1');  text = text.replace(/<\/em>\s*<em>/g, '');   text = text.replace(/<\/u>\s*<u>/g, '');  text = text.replace(/<\/s>\s*<s>/g, '');  text = text.replace(/<\/span>\s*<span class="teacher_talk">/g, '');    text = text.replace(/&(m|n)d;/ig, '&$1dash;');    return text;} function process_words(paragraph){  var text = '';  var words = paragraph.words;  var l = words.length;  for(var x = 0; x < l; x++){        var word = words[x];            var contents = word.contents;    contents = contents.replace(/\u2013/g, '&nd;');    contents = contents.replace(/\u2014/g, '&md;');    contents = contents.replace(/\uFEFF/g, '');          var appliedCharacterStyle = word.appliedCharacterStyle.name;    var fontStyle = word.fontStyle;    var underline = word.underline;    var color = word.fillColor.name;    var strike = word.strikeThru;        var blue = !!color.match(/Text Structure|Benchmark\s*Blue\s*100C\s*87M|Lesson_Tchr-tlk-nospace|ela/ig) ? true : false;        if(!!contents.match(/\W/)){      text += process_characters(word);    }else{                        var bold = !!fontStyle.match(/medium\scondensed|black|bold/ig) ? true : false;      var italic = !!appliedCharacterStyle.match(/italic/i) ? true : false;      italic = (!italic && !!fontStyle.match(/italic|oblique/ig)) ? true : italic;                  text += bold ? '<strong>' : '';      text += italic ? '<em>' : '';      text += underline ? '<u>' : '';      text += strike ? '<s>' : '';      text += blue ? '<span class="teacher_talk">' : '';            text += contents + ' ';            text += blue ? '</span>' : '';      text += strike ? '</s>' : '';      text += underline ? '</u>' : '';      text += italic ? '</em>' : '';      text += bold ? '</strong>' : '';          }      }  text = text.replace(/&(m|n)d;/ig, '&$1dash;');    text = text.replace(/-/g, '&#8209;');    return text.replace(/\s$/, '');}function process_characters(word){  var text = '';  var characters = word.characters;  var l = characters.length;  for(var x = 0; x < l; x++){        var character = characters[x];            var contents = character.texts[0].contents;         contents = contents.replace(/\u2013/g, '&nd;');    contents = contents.replace(/\u2014/g, '&md;');    contents = contents.replace(/\uFEFF/g, '');          var color = character.fillColor.name;        var appliedCharacterStyle = character.appliedCharacterStyle.name;    var blue = !!color.match(/Text Structure|Benchmark\s*Blue\s*100C\s*87M|Lesson_Tchr-tlk-nospace|ela/ig) ? true : false;    var bold = !!character.fontStyle.match(/medium\scondensed|black|bold/ig) ? true : false;    var italic = !!appliedCharacterStyle.match(/italic/i) ? true : false;    italic = (!italic && !!character.fontStyle.match(/italic|oblique/ig)) ? true : italic;    var underline = character.underline;    var overline = underline ? ( character.underlineOffset == -8 ? true : false ) : false;    var strike = character.strikeThru;               text += bold ? '<strong>' : '';    text += italic ? '<em>' : '';    text += underline ? '<u>' : '';    text += strike ? '<s>' : '';    text += blue ? '<span class="teacher_talk">' : '';        text += overline ? '<span class="overline">' : '';    text += x == l-1 ? contents+' ' : contents;    text += overline ? '</span>' : '';        text += blue ? '</span>' : '';    text += strike ? '</s>' : '';    text += underline ? '</u>' : '';    text += italic ? '</em>' : '';    text += bold ? '</strong>' : '';       }  text = text.replace(/&(m|n)d;/ig, '&$1dash;');  return text;}function build_tables(tables){      var text = '';  var l = tables.length;  for(var x = 0; x < l; x++){    var table = tables[x];    var firstCell = table.cells[0];    var firstCellStrokeColor = firstCell.topEdgeStrokeColor.name;        switch(true){            default: text += build_table(table);    }  }  return text;}function build_table(table, classname){  var text = '';    var textFrame_width = table.parent.geometricBounds[3] - table.parent.geometricBounds[1];  var table_width = table.width;  var width =  Math.round((table_width/textFrame_width)*100);    width = width >= 80 ? 100 : width;    text += '<table'+(classname ? ' class="'+classname+'"' : '')+' width="'+width+'%"><tbody>\r';  var rows = table.rows;  var l = rows.length;  for(var x = 0; x < table.rows.length; x++){    var row = table.rows[x];    if(row){            var no_border = !row.contents.toString().match(/\w/) ? true : false;      text += '<tr'+( no_border ? ' class="no_border"' : '')+'>\r';       var cells = row.cells;            var cl = cells.length;      for(y = 0; y < cl; y++){        var cell = cells[y];          if(cell){                     var color = cell.fillColor.name;          var column_width = Math.round( (cell.width/table.width) * 100);                 var valign = this.set_vertical_align_attribute(cell.verticalJustification);          var rowspan = cell.rowSpan == 1 ? '' : (' rowspan="'+cell.rowSpan+'"');          var colspan = cell.columnSpan == 1 ? '' : (' colspan="'+cell.columnSpan+'"');          var color_name = false;          switch(true){            case cell.fillTint == 5 : color_name = 'grey'; break;            case !!color.match(/C=43 M=95 Y=0 K=0/i): color_name = 'grade1'; break;          }          var cell_class = ' class="'+( color_name ? color_name : '' )+'"';                    text += '<td'+cell_class+rowspan+colspan+' height="'+(Math.round(cell.height)*1.7)+'" width="'+column_width+'%" valign="'+valign+'">\r';          text += process_paragraphs(cell);                            text += '</td>\r';        }      }      text += '</tr>\r';    }   }  text += '</tbody>\r</table>\r';    return text;} function set_vertical_align_attribute(justification){  switch(justification){    case VerticalJustification.TOP_ALIGN: return 'top'; break;    case VerticalJustification.CENTER_ALIGN: return 'middle'; break;    case VerticalJustification.BOTTOM_ALIGN: return 'bottom'; break;    case VerticalJustification.JUSTIFY_ALIGN: return 'baseline'; break;    default: return 'top';  }}function set_align_attribute(justification){  switch(justification){    case Justification.LEFT_ALIGN: return 'left'; break;    case Justification.CENTER_ALIGN: return 'center'; break;    case Justification.RIGHT_ALIGN: return 'right'; break;    default: return 'justify';  }}(function(){  log(process_textFrames(app.selection));})();end_log();