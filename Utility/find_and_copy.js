//CREATOR JASON YIM//CREATED 2016-07-11//UPDATED 2016-11-30//VERSION 1.7$.evalFile('/Users/' + $.getenv('USER') + '/Library/Preferences/Adobe InDesign/Version 11.0/en_US/Scripts/Scripts Panel/team scripts/Jason/Utility/console.js');start_log();var separator = '/'; if(File.fs == 'Windows'){separator = '\\';}var output_path = '~'+separator+'Desktop'+separator+'indd_files';var output_folder = create_folder(output_path);var position;var bec_path = separator+'BEC';var cs_product_english = bec_path+separator+'CS Product English';var new_core_program_path = cs_product_english+separator+'NEW CORE PROGRAM';var path = new_core_program_path+separator+'Sound Spelling Kit'+separator+'SSPelling Word Cards';var search_folders = [  	Folder(path)	];//filter object, data type: regex//name is needed to specify file name//the rest is to filter out folders, false for no filter//parent filter is used when the parent folder exists in the search foldervar filter = {	name: RegExp(/\.indd/),	ignore: RegExp(/^old|\Wold$/ig),	parent: false,};(function(){	find_and_copy(search_folders, output_folder, filter);})();function find_and_copy(folders, output_folder, filter){		var l = folders.length	for(var x = 0; x < l; x++){ 		if(folders[x].exists){			log('searching for '+filter.name+'...');			find_folder_with(folders[x], filter, make_proper_copy);	 					}else{			log('folder does not exist.')		} 	}    }function make_proper_copy(file, target){	app.linkingPreferences.checkLinksAtOpen = false;	app.scriptPreferences.userInteractionLevel = UserInteractionLevels.NEVER_INTERACT;	app.open(file);	document.saveACopy(target);	document.close(SaveOptions.no);	app.open(target);	unlink_all_assignments(document);	document.close(SaveOptions.yes);	app.linkingPreferences.checkLinksAtOpen = true;	app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL;	log(file.name + ' was found and properly copied. Path: '+file.fullName); 		}function unlink_all_assignments(doc){ 	var assignments = doc.assignments;	var a = assignments.length; 	while(a--){		var stories = assignments[a].assignedStories;		var s = stories.length; 		while(s--){ stories[s].storyReference.itemLink.unlink(); } 		try{assignments[a].remove();}catch(error){}	} } //returns a collection of files//has callback option, needs output folder variablefunction find_folder_with(dir, filter, callback){ 			var collection = [];	collection = collection.concat(get_files(dir, filter.name));	if(callback){		var a = collection.length;		for(var y = 0; y < a; y++){									var target = new File(output_folder + separator + collection[y].name); 						if(!target.exists && !target.name.match(filter.ignore)){				try{callback(collection[y], target);}catch(e){collection[y].copy(target); log(collection[y].name + ' failed to make a proper copy.');}						}					} 		} 	var bunch_of_folders = get_all_folders(dir); 		var b = bunch_of_folders.length;	for(var x = 0; x < b; x++){		switch(true){			case (!!filter.ignore): if(!bunch_of_folders[x].name.match(filter.ignore)){collection = collection.concat(find_folder_with(bunch_of_folders[x], filter, callback));} break;			case (!!filter.parent): if(!!bunch_of_folders[x].name.match(filter.parent)){collection = collection.concat(find_folder_with(bunch_of_folders[x], filter, callback));} break;			default: collection = collection.concat(find_folder_with(bunch_of_folders[x], filter, callback));		}  	} 	 		return collection;}function get_all_folders(dir){	var array = dir.getFiles();	var new_array = [];	var c = array.length;	for(var x = 0; x < c; x++){		if(!array[x].type){new_array.push(array[x]);}	}	return new_array;}  function get_files(dir, name){	var files = [];	var array = dir.getFiles(); 	var d = array.length;	for(var x = 0; x < d; x++){			if(array[x].type){if(array[x].name.match(name) != null){files.push(array[x]);}}	}   	return files;}end_log();alert('Complete!');